{"name":"Habanero","tagline":"Load Testing framework in erlang with real-time feedback","body":"# haba√±ero\r\n\r\nHabanero is a lightweight, HTTP load testing tool written in Erlang.\r\n\r\n![A screenshot of the habanero dashboard](https://raw.github.com/AdRoll/habanero/master/dashboard.png \"Habanero Dashboard\")\r\n\r\n## Quick start\r\n\r\nHabanero requires Erlang R15B03 or higher. On OS X, Erlang is available via [Homebrew](http://brew.sh/).\r\n\r\n```shell\r\nbrew install erlang\r\n```\r\n\r\nOnce Erlang is installed, run make to compile habanero:\r\n\r\n```shell\r\nmake\r\n```\r\n\r\nHabanero can be started in interactive mode:\r\n\r\n```shell\r\n./habanero.sh \r\n```\r\n\r\n...or detached:\r\n\r\n```shell\r\n./habanero.sh -detached\r\n```\r\n\r\nBy default, the habanero dashboard is available at http://0.0.0.0:5566.\r\n\r\n\r\n## Configuring Tests\r\n\r\n### Pipelines\r\n\r\nThe core of habanero's execution model is the pipeline. This configurable in <em>habanero.config</em>.\r\n\r\n```erlang\r\n%% Sample pipeline executes a GET request on index.html on localhost.\r\n{pipeline, [\r\n    {sample_get, [\r\n        %% Returns [Method, Url, Headers]\r\n            {compose_request, {\r\n                return, [\r\n                    get,\r\n                    \"http://localhost/index.html\",\r\n                [{\"User-Agent\", \"Habanero/1.0\"}]\r\n            ]}\r\n            },\r\n        {transition, {return, sample_get}}\r\n    ]}\r\n]}\r\n\r\n```\r\n\r\n#### Stages\r\n\r\nPipelines are composed of one or more stages. You can imagine a pipeline as a directed graph where each node represents an HTTP request. The above example shows a simple pipeline with a single request.\r\n\r\nEach stage is comprised of two configurable phases: <em>compose request</em> and <em>transition</em>.\r\n\r\n#### Phases\r\n\r\nCompose request defines the request parameters. This phase must return a list of one of two forms.\r\n\r\nAn empty body request, e.g. GET or HEAD, in the form [Method, Url, Headers]:\r\n\r\n```erlang\r\n{compose_request, {\r\n    return, [get,\"http://localhost/index.html\",[{\"User-Agent\", \"Habanero/1.0\"}]]}\r\n},\r\n```\r\n\r\nOr a request with a provided body, in form [Method, Url, Headers, ContentType, Body]:\r\n\r\n```erlang\r\n{compose_request, {\r\n    return, [post,\"http://localhost/newpost\",[{\"User-Agent\", \"Habanero/1.0\"}], \"text/plain\", \"foo=bar\"]}\r\n},\r\n```\r\n\r\nTransition must return a single value specifying the next stage to execute:\r\n\r\n```erlang\r\n{transition, {return, sample_get}}\r\n```\r\n\r\n##### Erlang Support\r\n\r\nPhases can also execute Erlang functions using the form\r\n\r\n```erlang\r\n{\r\n    compose_request, {erlang, {my_module, my_function}}\r\n},\r\n```\r\n\r\nErlang functions must accept a Context parameter, e.g.\r\n```erlang\r\n-module(my_module).\r\n\r\n-export([my_function/1]).\r\n\r\nmy_function(Context) ->\r\n    [get, \"http://localhost/index.html\", [{\"User-Agent\", \"Habanero\"}]]\r\n```\r\n\r\n##### Javascript Support\r\n\r\n<b>To enable Javascript support, you must edit ```rebar.config``` and uncomment the erlang_js dependency.</b>\r\n\r\n\r\n```erlang\r\n{sample_get, [\r\n    {compose_request, {javascript, \"function(context){\r\n                var method = 'get';\r\n                var url = 'http://localhost/index.html';\r\n                return [method, url, []];\r\n            };\"}},\r\n    {transition, {return, sample_get}}\r\n]},\r\n```\r\n\r\n### Running tests\r\n\r\nTest runs can be pre-configured as a series of worker counts over time.\r\n\r\n```erlang\r\n{timeline, [\r\n    {5, 10},\r\n    {15, 10},\r\n    {20, 20},\r\n    {30, 20}\r\n]},\r\n```\r\n\r\nThe above example defines a 30 second test run. Points in the timeline are specified as tuples of {second, worker count}. Habanero will interpolate the worker values between points spawning or terminating workers as necessary.\r\n\r\nYou can execute a pre-configured test run via ```start_run()```\r\n\r\n```erlang\r\n1> habanero_coordinator:start_run().\r\nok\r\n2>\r\n```\r\n\r\nTest runs can be stopped prematurely via ```stop_run()```\r\n\r\n```erlang\r\n1> habanero_coordinator:stop_run().\r\nok\r\n2>\r\n```\r\n\r\nAd hoc test runs can also be excecuted from via the shell as follows, the arguement to ```workers()``` is the number of workers to spawn:\r\n\r\n```erlang\r\n1> habanero_coordinator:workers(1).\r\nok\r\n2> 17:41:00.507 [info] Spawned worker <0.119.0>\r\n```\r\n\r\n## Web Endpoints\r\n\r\nHabanero exposes the following web API endpoints:\r\n\r\n<dl>\r\n  <dt>/api/start</dt>\r\n  <dd>Start a test run.</dd>\r\n  \r\n  <dt>/api/stop</dt>\r\n  <dd>Stop a test run.</dd>\r\n  \r\n  <dt>/api/history</dt>\r\n  <dd>Fetch a JSON summary of past test runs.</dd>\r\n  \r\n  <dt>/api/poll</dt>\r\n  <dd>Fetch current telemetry data.</dd>\r\n\r\n  <dt>/api/load?id=RUN_ID</dt>\r\n  <dd>Fetch telemetry data for a past test run, RUN_ID is the timestamp of the prior run.</dd>\r\n</dl>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}